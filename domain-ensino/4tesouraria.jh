// Pronto pagamento e Prestacoes (Ex, 1X, 2X, 3X, 4X, ...)
// Forma de pagamento
entity FormaLiquidacao(fin_forma_liquidacao) {
    nome String unique required,
    juro Double required min(0) max(100), // em porcentagem
    prazoLiquidacao Integer required min(0) // em dias
    quantidade Integer required min(1), // Numero de prestacoe 1,2,3,...N
    icon String
}

entity CoordenadaBancaria(core_coordenada_bancaria) {
	descricao String required unique, // Nome do banco, Nome do caixa
    proprietario String required,
    numeroConta String unique required,
    iban String unique,
    ativo Boolean required
}

entity Emolumento(fin_emolumento) {
    nome String required unique, /* Ex. PROPINA 10Âª INFO/M */
    montante BigDecimal required min(0),
    montanteMulta Double required min(0), // porcentagem
    tempoMulta Integer required min(0),
    quantidade Double min(0)
}

entity Deposito(fin_deposito) {
    numero String required unique,
    dataDeposito LocalDate required,
    montante BigDecimal min(0) required,
    data ZonedDateTime required,
    anexo AnyBlob
}

entity PagamentoEmolumento(fin_pagamento) {
    data ZonedDateTime,
    numero String unique required
}

entity EfeitoPagamento(fin_detalhe_pagamento) {
    mensalidade Boolean required,
    quantidade Integer required min(1),
    montante BigDecimal required min(0),
    desconto Double min(0), // porcentagem
    multa Double min(0) , // porcentagem
    juro Double min(0),
    data ZonedDateTime,
    vencimento LocalDate,
    quitado Boolean required
}

entity ContaAluno {
    debito BigDecimal required min(0),
    credito BigDecimal required min(0)
}


/**
 * One to many relationship.
 */
relationship OneToMany {
    Emolumento to EfeitoPagamento{emolumento(nome) required},
    Aluno to PagamentoEmolumento{aluno(numeroProcesso) required },
    FormaLiquidacao to PagamentoEmolumento{formaLiquidacao(nome) required },
    PagamentoEmolumento to EfeitoPagamento{pagamento(numero) required},
    CoordenadaBancaria to Deposito{bancoCaixa(descricao) required },
    Curso to Emolumento{curso(nome)},
    Lookup to Emolumento{turno(nome)},
    Lookup to Emolumento{classe(nome)},
    Lookup to Deposito{meio(nome)}, // NUMERARIO, TRANSFERENCIA, TPA, DEPOSITO
    Aluno to PagamentoEmolumento{aluno(numeroProcesso) required },
    Lookup to PagamentoEmolumento{estado(nome) required }, // Liquidado, Por liquidar, A Liquidar, Necessita verificacao, Pendente
    Lookup to EfeitoPagamento{descricao(nome) required }, // MES; DISCIPLINA
    Aluno to ContaAluno
}

/**
 * Many to one relationship.
 */
relationship ManyToOne {
    Deposito{funcionario(login) required } to User,
    EfeitoPagamento{funcionario(login) required } to User
}

relationship ManyToMany {
    EfeitoPagamento{deposito(numero)} to Deposito,
    Deposito{aluno(numeroProcesso)} to Aluno
}

dto * with mapstruct
paginate * with pagination
service * with serviceClass
search * with elasticsearch
filter Deposito, Emolumento, PagamentoEmolumento, EfeitoPagamento
